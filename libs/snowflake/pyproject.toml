[tool.poetry]
name = "langchain-snowflake"
version = "0.2.2"
description = "An integration package connecting Snowflake and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-snowflake"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-snowflake/tree/main/libs/snowflake"
"Release Notes" = "https://github.com/langchain-ai/langchain-snowflake/releases"

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
langchain-core = "^0.3.75"
langchain = "^0.3.27"
langgraph = "^0.6.4"
langgraph-prebuilt = "^0.6.4"
snowflake-snowpark-python = "^1.20.0"
snowflake = ">=0.8.0,<1.0"
pydantic = "^2.7.0"
aiohttp = "^3.9.0"
cryptography = {version = "^42.0.0", optional = true}
langsmith = "^0.4.21"
uv = "^0.8.22"

[tool.poetry.extras]
key_pair = ["cryptography"]

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
pytest-socket = "^0.7.0"
pytest-watcher = "^0.3.4"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }
langchain-tests = "^0.3.5"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.5"

[tool.poetry.group.typing.dependencies]
mypy = "^1.10"
types-requests = "^2.31.0"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "T201", # print
]

[tool.mypy]
disallow_untyped_defs = false
ignore_missing_imports = true
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = false
no_implicit_optional = true

# Disable problematic error codes for mixin classes
disable_error_code = ["attr-defined", "misc", "no-untyped-def", "assignment", "arg-type", "return-value"]

[[tool.mypy.overrides]]
module = ["snowflake.core", "snowflake.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_snowflake.*"
disable_error_code = ["attr-defined", "misc", "no-untyped-def", "assignment", "arg-type", "return-value"]

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "compile: mark placeholder test used to compile integration tests without running them",
  "requires: mark tests as requiring a specific library",
  "integration: mark test as an integration test that requires real Snowflake credentials",
]
asyncio_mode = "auto"
